//======================================================================
//
//  6502 Macro Assembler Grammar
//
//  Duncan Munro
//  20/12/2019
//
//======================================================================

%title		= "6502 Macro Assembler Grammar";
%version	= "0.1";
%author		= "Duncan Munro";  
%start		= <assembler line>;
           

//
// Predefined sets
//

{Tab} 			= [\t];
{Space}			= [ ];
{Digit} 		= [0-9];
{Letter} 		= [A-Za-z];
{Whitespace} 	= {Space} + {Tab};
{Printable}		= [\x20-\x7e];

     
//
// Character set definitions
//

{DigitBin}		= [01];
{DigitHex}		= {Digit} + [ABCDEF];
{DigitNonZero}	= [123456789];
{DigitOct}		= [01234567];
{DQuote}		= [\x22];

{CommentChar}	= {Printable} + {Tab};

{SymbolStart}	= {Letter} + [_];
{SymbolMid}		= {SymbolStart} + {Digit};                                    
              

//
// Terminal definitions
//

// Opcodes

OPCODE	= MIXED("ADC")
		| MIXED("AND")
		| MIXED("ASL")
		| MIXED("BCC")
		| MIXED("BCS")
		| MIXED("BEQ")
		| MIXED("BIT")
		| MIXED("BMI")
		| MIXED("BNE")
		| MIXED("BPL")
		| MIXED("BRK")
		| MIXED("BVC")
		| MIXED("BVS")
		| MIXED("CLC")
		| MIXED("CLD")
		| MIXED("CLI")
		| MIXED("CLV")
		| MIXED("CMP")
		| MIXED("CPX")
		| MIXED("CPY")
		| MIXED("DEC")
		| MIXED("DEX")
		| MIXED("DEY")
		| MIXED("EOR")
		| MIXED("INC")
		| MIXED("INX")
		| MIXED("INY")
		| MIXED("JMP")
		| MIXED("JSR")
		| MIXED("LDA")
		| MIXED("LDX")
		| MIXED("LDY")
		| MIXED("LSR")
		| MIXED("NOP")
		| MIXED("ORA")
		| MIXED("PHA")
		| MIXED("PHP")
		| MIXED("PLA")
		| MIXED("PLP")
		| MIXED("ROL")
		| MIXED("ROR")
		| MIXED("RTI")
		| MIXED("RTS")
		| MIXED("SBC")
		| MIXED("SEC")
		| MIXED("SED")
		| MIXED("SEI")
		| MIXED("STA")
		| MIXED("STX")
		| MIXED("STY")
		| MIXED("TAX")
		| MIXED("TAY")
		| MIXED("TSX")
		| MIXED("TXA")
		| MIXED("TXS")
		| MIXED("TYA") keyword ;

// Binary

BinAnd           = "&"	symbol ;
BinNot           = "~"	symbol ;                 
BinOr            = "|"	symbol ;
BinXor           = "^"	symbol ;                                  
LeftShift        = "<<"	symbol ;
Modulo           = "%"	symbol ;
RightShift       = ">>"	symbol ;
                                                   
// Comparison

Equal            = "=="	symbol ;
GreaterThan      = ">"	symbol ;
GreaterEqual     = ">="	symbol ;
LessEqual        = "<="	symbol ;                                 
LessThan         = "<"	symbol ;                                  
LogicalAnd       = "&&"	symbol ;                 
LogicalNot       = "!"	symbol ;                 
LogicalOr        = "||"	symbol ;                 
NotEqual         = "!="	symbol ;                 
                 
// Literals

BinLiteral       = "0b"{DigitBin}+;
DecLiteral       = {DigitNonZero}{Digit}*;
HexLiteral       = ( "0x"{DigitHex}+ | "$"{DigitHex}+ )  ;
OctLiteral       = "0"{DigitOct}*;

// Rest of world

Assignment			= "=" symbol;
Accum				= MIXED("A")			keyword;
ComX				= MIXED(",X")			keyword;
ComY				= MIXED(",Y")			keyword;
F_ASC				= MIXED("ASC(")			keyword;
F_BUILD				= MIXED("BUILD()")		keyword;
F_CHR				= MIXED("CHR(")			keyword;
F_DATE				= MIXED("DATE()")		keyword;
F_HEX				= MIXED("HEX(")			keyword;
F_HIGH				= MIXED("HIGH(")		keyword;
F_IIF				= MIXED("IIF(")			keyword;
F_LEFT				= MIXED("LEFT(")		keyword;
F_LOW				= MIXED("LOW(")			keyword;
F_LOWER				= MIXED("LOWER(")		keyword;
F_MID				= MIXED("MID(")			keyword;
F_POS				= MIXED("POS(")			keyword;
F_POSCI				= MIXED("POSCI(")		keyword;
F_RIGHT				= MIXED("RIGHT(")		keyword;
F_STRING			= MIXED("STRING(")		keyword;
F_TIME				= MIXED("TIME()")		keyword;
F_UPPER				= MIXED("UPPER(")		keyword;
F_VERSION			= MIXED("VERSION(")		keyword;
F_VALUE				= MIXED("VALUE(")		keyword;

K_BYTE				= MIXED(".BYTE")		keyword;
K_DB				= MIXED(".DB")			keyword;
K_DD				= MIXED(".DD")			keyword;
K_DEFINE			= MIXED(".DEFINE")		keyword;
K_DEFMACRO			= MIXED(".DEFMACRO")	keyword;
K_DS				= MIXED(".DS")			keyword;
K_DSZ				= MIXED(".DSZ")			keyword;
K_DW				= MIXED(".DW")			keyword;
K_ELSE				= MIXED(".ELSE")		keyword;
K_ENDIF				= MIXED(".ENDIF")		keyword;
K_ENDM				= MIXED(".ENDM")		keyword;
K_ERROR				= MIXED(".ERROR")		keyword;
K_IF				= MIXED(".IF")			keyword;
K_IFDEF				= MIXED(".IFDEF")		keyword;
K_IFNDEF			= MIXED(".IFNDEF")		keyword;
K_INCLUDE			= MIXED(".INCLUDE")		keyword;
K_LIST				= MIXED(".LIST")		keyword;
K_MESSAGE			= MIXED(".MESSAGE")		keyword;
K_MACRO				= MIXED(".MACRO")		keyword;
K_NOLIST			= MIXED(".NOLIST")		keyword;
K_ORG				= MIXED(".ORG")			keyword;
K_SET				= MIXED(".SET")			keyword;
K_UNDEFINE			= MIXED(".UNDEFINE")	keyword;
K_WARNING			= MIXED(".WARNING")		keyword;

LocalAddress		= "@" {SymbolStart}{SymbolMid}*;
MacroPlaceholder	= "@"{Digit};
StringConstant		= {DQuote} {Printable}* {DQuote};                 
SymbolDef			= {SymbolStart}{SymbolMid}*;   
Whitespace			= {Whitespace}+ ignore;                 
                 


//
// Lexical groups
//

LineComment1      = ";" {CommentChar}* ignore;           
LineComment2      = "//" {CommentChar}* ignore;           
              


//
// Productions
//

<assembler line>	: <label> <directive line>						# ActIgnore
					| <directive line>								# ActIgnore
					| <label> <instruction>							# ActIgnore
					| <instruction>									# ActIgnore
					| <label>										# ActIgnore
					|												# ActIgnore
					;
                   
<directive line>	: K_BYTE	 <expression> "," <expression>		# ActDirByte
					| K_DB       <expression list>					# ActDirDB
					| K_DD       <expression list>					# ActDirDD
					| K_DEFINE   SymbolDef							# ActDirDefine
					| K_DEFINE   SymbolDef Assignment <expression>	# ActDirDefineExpr
					| K_DEFMACRO SymbolDef							# ActDirDefmacro
					| K_DS       <string expr>						# ActDirDS
					| K_DSZ      <string expr>						# ActDirDSZ
					| K_DW       <expression list>					# ActDirDW
					| K_ELSE										# ActDirElse
					| K_ENDIF										# ActDirEndif
					| K_ENDM										# ActDirEndm
					| K_ERROR    <string expr>						# ActDirError
					| K_IF		 <expression>						# ActDirIf
					| K_IFDEF    SymbolDef							# ActDirIfdef
					| K_IFNDEF   SymbolDef							# ActDirIfndef
					| K_INCLUDE  <string expr>						# ActDirInclude
					| K_LIST										# ActDirList
					| K_MACRO	 SymbolDef <expression list>		# ActDirMacroExpr
					| K_MACRO    SymbolDef							# ActDirMacroNoexpr
					| K_MESSAGE  <string expr>						# ActDirMessage
					| K_NOLIST 										# ActDirNolist
					| K_ORG      <expression>						# ActDirOrg
					| K_SET      SymbolDef Assignment <expression>	# ActDirSet
					| K_UNDEFINE SymbolDef							# ActDirUndefine
					| K_WARNING  <string expr>						# ActDirWarning
					;

<label> : "@" SymbolDef ":"
          | SymbolDef ":"
		  ;

<instruction> : OPCODE <Operand>								# ActInstruction
			;

<Operand>	: "[" <expression> ComX "]"		// [expr,X]
            | "[" <expression> "]" ComY		// [expr],Y
            | "[" <expression> "]"			// [expr]  used only with JMP
            | "#" <expression>				// #expr
            | <expression> ComX				// expr,X
            | <expression> ComY				// expr,Y
            | <expression>					// Could be zero page, 16 bit or branch
            | Accum							// Accumulator (A)
            |								// Implied, no operand                           
			;

<expression list>	: <expression list> "," <expression>
					| <expression>								# ActCopy1
					;
                               
<expression>		: <expression> LogicalOr <and expr>
					| <and expr>								# ActCopy1
					;
               
<and expr>			: <and expr> LogicalAnd <binor expr>
					| <binor expr>								# ActCopy1
					;
             
<binor expr>		: <binor expr> BinOr <binxor expr>
					| <binxor expr>								# ActCopy1
					;
               
<binxor expr>		: <binxor expr> BinXor <binand expr>
					| <binand expr>								# ActCopy1
					;
                
<binand expr>		: <binand expr> BinAnd <equate expr>
					| <equate expr>								# ActCopy1
					;
                
<equate expr>		: <equate expr> Equal <compare expr>
					| <equate expr> NotEqual <compare expr>
					| <compare expr>							# ActCopy1
					;
                
<compare expr>		: <compare expr> LessThan <shift expr>
					| <compare expr> GreaterThan <shift expr>
					| <compare expr> LessEqual <shift expr>
					| <compare expr> GreaterEqual <shift expr>
					| <shift expr>								# ActCopy1
					;
                 
<shift expr>		: <shift expr> LeftShift <add expr>
					| <shift expr> RightShift <add expr>
					| <add expr>								# ActCopy1
					;
                 
<add expr>			: <add expr> "+" <mult expr>				# ActExprAdd
					| <add expr> "-" <mult expr>
					| <mult expr>								# ActCopy1
					;
                 
<mult expr>			: <mult expr> "*" <unary expr>
					| <mult expr> "/" <unary expr>
					| <mult expr> Modulo <unary expr>
					| <unary expr>								# ActCopy1
					;
                 
<unary expr>		: "-" <value>
					| LogicalNot <value>
					| BinNot <value>
					| <value>									# ActCopy1
					;
                 
<value>				: K_ORG
					| HexLiteral								# ActHexLiteral
					| DecLiteral								# ActDecLiteral
					| OctLiteral								# ActOctLiteral
					| BinLiteral								# ActBinLiteral
					| F_ASC <string expr> ")"
					| F_HIGH <expression> ")"
					| F_IIF <expression> "," <expression> "," <expression> ")"
					| F_LOW <expression> ")"
					| F_POS <string expr> "," <string expr> ")"
					| F_POSCI <string expr> "," <string expr> ")"
					| F_VALUE <string expr> ")"
					| K_TRUE
					| K_FALSE
					| "(" <expression> ")"
					| SymbolDef									# ActValueSymbol
					| LocalAddress
					| MacroPlaceholder
					;

<string expr>		: <string expr> "+" <string result>
					| <string result>								# ActCopy1
					| F_BUILD
					| F_CHR <expression> ")"
					| F_DATE
					| F_HEX <expression> ")"
					| F_HEX <expression> "," <expression> ")"
					| F_LEFT <string expr> "," <expression> ")"
					| F_LOWER <string expr> ")"
					| F_MID <string expr> "," <expression> "," <expression> ")"
					| F_RIGHT <string expr> "," <expression> ")"
					| F_STRING <expression> ")"
					| F_TIME
					| F_UPPER <string expr> ")"
					| F_VERSION
					;
                
<string result>		: StringConstant								# ActStringConstant
					;  